Сервлет - это Java класс, который расширяет функциональность сервера и позволяет создавать
 динамические веб-приложения. Он работает как промежуточное звено между клиентским запросом 
 и сервером, обрабатывая запросы и генерируя ответы.

Web-сервер используется для хостинга и обслуживания веб-приложений. Он отвечает за обработку 
HTTP-запросов от клиентов (браузеров) и предоставляет им запрашиваемые веб-страницы и ресурсы.

Принципы работы сервлета включают:

Сервлет обрабатывает HTTP-запросы от клиентов.
Сервлет использует методы жизненного цикла для инициализации, обработки запросов 
и завершения работы.
Клиент отправляет HTTP-запрос на URL, который сопоставлен с сервлетом.
Web-сервер перенаправляет запрос на соответствующий сервлет.
Сервлет обрабатывает запрос, взаимодействуя с клиентом через объекты HttpServletRequest 
и HttpServletResponse.
Сервлет возвращает ответ клиенту, который может содержать HTML-код, данные JSON, файлы и т.д.
Методы doGet и doPost - это методы сервлета, предназначенные для обработки GET и POST 
запросов соответственно. Основное отличие между методами GET и POST заключается в способе 
передачи данных: GET передает данные через URL, а POST передает данные в теле HTTP-запроса.

Методы жизненного цикла сервлета:

init(): Вызывается при инициализации сервлета.
service(): Вызывается для обработки каждого запроса.
destroy(): Вызывается перед завершением работы сервлета.
Имя и URL сервлета определяются в файле web.xml или аннотациями в самом классе сервлета.

Для получения значения параметра формы в сервлете можно использовать методы 
request.getParameter("parameterName") или request.getParameterValues("parameterName").

Сервлет возвращает результат своей работы на сторону клиента через объект 
HttpServletResponse, например, записывая данные в тело ответа или отправляя редирект.

Развертывание сервлета происходит путем конфигурации сервлета в файле web.xml 
или с использованием аннотаций в самом классе сервлета.

Интерфейс ServletContext предоставляет информацию о контексте веб-приложения 
и доступ к его ресурсам.

Атрибут контекста - это объект, который хранится в контексте веб-приложения и 
общий для всех сервлетов и компонентов приложения.

Из контекста сервлета можно получить информацию о параметрах и атрибутах веб-
приложения, доступных сервлетам и другим компонентам.

Интерфейс ServletConfig предоставляет доступ к конфигурации сервлета, включая 
параметры инициализации.

Интерфейс HttpServletRequest содержит информацию о HTTP-запросе, включая 
параметры запроса, заголовки, cookies и другие атрибуты.

Интерфейс HttpServletResponse используется для управления HTTP-ответом, включая 
установку статуса ответа, заголовков и отправки содержимого ответа.

Переадресация запросов осуществляется на стороне сервера, когда сервер отправляет 
клиенту специальный ответ с новым URL для перехода. Перенаправление откликов происходит 
на стороне клиента, когда браузер получает ответ с кодом перенаправления и автоматически 
перенаправляет пользователя на новый URL.

Для сохранения данных между запросами можно использовать объекты сеанса (session), 
атрибуты контекста, cookies или базу данных.

Объект HttpSession представляет сеанс взаимодействия между клиентом и сервером и 
содержит атрибуты, доступные на протяжении всего сеанса.

Файлы Cookie - это небольшие текстовые файлы, которые сервер отправляет клиенту и 
которые клиент сохраняет и отправляет с каждым последующим запросом. Их можно создать 
и отправить с помощью методов HttpServletResponse.

Интерфейс Filter используется для манипуляции запросами и ответами, проходящими через 
сервлеты в целях их модификации или фильтрации.

Методы жизненного цикла фильтра:

init(): Вызывается при инициализации фильтра.
doFilter(): Вызывается для




JSP (JavaServer Pages) - это технология Java, которая используется для создания динамических 
веб-страниц. Она позволяет разработчикам встраивать Java-код прямо в HTML-страницы, делая 
их более динамичными и интерактивными.

Жизненный цикл JSP включает следующие этапы:

Трансляция: JSP-файлы транслируются в сервлеты.
Инициализация: Создается экземпляр сервлета JSP.
Обработка запроса: JSP-код выполняется и формируется HTML-ответ.
Уничтожение: Завершение работы сервлета JSP.
Основное отличие между JSP и сервлетами заключается в том, что JSP позволяет разработчикам 
встраивать HTML-код с Java-кодом, в то время как сервлеты являются Java-классами, в которых 
HTML-код создается с помощью методов Java.

Некоторые основные теги JSP и их назначение:

<% ... %>: Используется для вставки Java-кода.
<%= ... %>: Используется для вывода значения переменной или выражения Java.
<%! ... %>: Используется для определения методов и переменных, которые будут доступны во всем JSP-файле.
<%@ ... %>: Используется для указания директив, таких как директива импорта, директива страницы и другие.
Неявные объекты JSP включают:

request: Объект HttpServletRequest, представляющий HTTP-запрос.
response: Объект HttpServletResponse, представляющий HTTP-ответ.
session: Объект HttpSession, представляющий сеанс пользователя.
application: Объект ServletContext, представляющий контекст приложения.
Области видимости для переменных JSP:

Page scope: Переменные существуют только в рамках текущей JSP-страницы.
Request scope: Переменные существуют только в рамках текущего HTTP-запроса.
Session scope: Переменные существуют в рамках сеанса пользователя.
Application scope: Переменные существуют в рамках всего веб-приложения.

PageContext - это объект, который предоставляет доступ к различным областям видимости и другим функциям JSP.

EL (Expression Language) - это язык выражений, который позволяет упростить доступ к 
данным в JSP. Он используется для доступа к атрибутам объектов, вызова методов и выполнения операций над данными.

Для задания и настройки страницы ошибки в JSP используется директива errorPage в заголовке JSP-страницы. Например:

jsp
Copy code
<%@ page errorPage="error.jsp" %>

Взаимодействие JSP-Servlet-JSP происходит путем передачи данных от JSP к сервлету через 
запрос и обратно через ответ. Сервлет обрабатывает запрос, выполняет необходимую логику 
и генерирует ответ, который может содержать данные, переданные обратно на JSP для отображения.




Apache Maven - это инструмент для управления проектами на основе Java и других 
языков программирования. Он предназначен для автоматизации процесса сборки, 
тестирования и управления зависимостями проекта. Чтобы узнать версию Maven, можно 
выполнить команду mvn -v.

Структура каталогов в Maven обычно выглядит следующим образом:

less
Copy code
├── src
│   ├── main
│   │   ├── java      // Исходные файлы Java
│   │   ├── resources // Ресурсы (например, файлы конфигурации)
│   │   └── webapp    // Веб-ресурсы (HTML, CSS, JavaScript и т.д.)
│   └── test
│       ├── java      // Тестовые исходные файлы Java
│       └── resources // Тестовые ресурсы
└── pom.xml           // Файл проекта Maven
pom.xml (Project Object Model) - это файл конфигурации проекта Maven. Он содержит 
информацию о проекте, такую как зависимости, плагины, настройки сборки и т.д.

Супер POM (Super Project Object Model) - это POM по умолчанию, который используется 
Maven. Он определяет базовые настройки и зависимости, применяемые ко всем проектам Maven по умолчанию.

Для минимального POM необходимы следующие элементы:

<project>
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.example</groupId>
    <artifactId>my-project</artifactId>
    <version>1.0.0</version>
</project>
Артефакт - это файл или файлы, созданные в процессе сборки проекта. Полное имя артефакта 
включает groupId, artifactId и version.

Зависимости в Maven - это библиотеки или модули, которые требуются для сборки и выполнения 
проекта. Транзитивная зависимость - это зависимость, которая необходима для другой зависимости 
и автоматически загружается Maven.

Плагин в Maven - это инструмент, который используется для расширения функциональности Maven. 
Он может использоваться для выполнения различных задач, таких как компиляция кода, выполнение 
тестов, упаковка проекта и т.д.

Задача в Maven - это цель или операция, которую можно выполнить с помощью плагина Maven. 
Например, задача compile компилирует исходные файлы проекта.

Репозиторий в Maven - это хранилище библиотек и артефактов, которые используются Maven 
при сборке проектов. Существует несколько типов репозиториев в Maven, включая локальные, 
центральные и удаленные.

Порядок поиска зависимостей Maven следующий: локальный репозиторий, центральный 
репозиторий, удаленные репозитории.

Основные фазы жизненного цикла сборки Maven: validate, compile, test, package, 
verify, install, deploy.

Команда mvn site создает сайт проекта, включая отчеты о тестировании, документацию 
и другую информацию о проекте. Команда mvn clean удаляет все сгенерированные файлы 
и каталоги, созданные в процессе сборки.

Жизненный цикл сборки Default (Build) состоит из трех основных фаз: clean, default 
(или site для создания сайта) и deploy.

Типы плагинов в Maven: билд-плагины, ресурсные плагины, отчеты о проекте, плагины 
аспектов, плагины для работы с репозиториями и другие.

Maven использует внешние зависимости, когда не удается найти требуемую зависимость 
в локальном или центральном репозиториях.

Команда mvn archetype:generate создает новый проект на основе архетипа.

Некоторые основные теги pom.xml: project, groupId, artifactId, version, dependencies, 
plugins, build, repositories, profiles и многие другие.